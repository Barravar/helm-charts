# Default values for knativeapps.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  tag: "<app-version>"
  # Business annotations
  meta:
    team: ""
    owner: ""
    costCenter: ""
    businessUnits: ""
    compliance: ""
    slackChannel: ""
    environment: ""
    partOf: ""
    commonLabels: {}

# This is to override the chart name.
appNameOverride: ""

# This is the application version.
appVersion: ""

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: "public.ecr.aws/nginx/nginx-unprivileged"
  tag: "alpine3.20"
  pullPolicy: IfNotPresent

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}

# Specifies the Knative Service definitions
kservice:
  # Defines how to expose the Knative Service: cluster-local, internal or external
  visibility: external
  port:
    # name accepts 'http1' or 'h2c'
    name: http1
    protocol: TCP
    containerPort: 8080
  # Additional annotations to add to the Knative Service 
  annotations: {}
  # Additional labels to add to the Knative Service
  labels: {}

podSecurityContext: {}
  # runAsNonRoot: true

securityContext: {}
  # capabilities:
  #   add:
  #   - NET_BIND_SERVICE
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsUser: 1000

# Additional annotations to add to all resources 
additionalAnnotations: {}
# Additional labels to add to all resources
additionalLabels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 150m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Setup the liveness and readiness probes
probes: {}
  # enabled: false
  # liveness:
  #   httpGet:
  #     path: /
  #     port: http1
  # readiness:
  #   httpGet:
  #     path: /
  #     port: http1

# Set up Knative Serving autoscaling. More information can be found here: https://knative.dev/docs/serving/autoscaling/
autoscaling: 
  # Defines which metric type is watched
  # Supported values: 'concurrency', 'rps', 'cpu', 'memory', <custom>
  metric: concurrency
  # Target value for autoscaler to maintain for the configured metric.
  # concurrency: number of simultaneous requests
  # rps: number of requests per second
  # cpu: usage percentage
  # memory: integer value in Mi
  target: 100
  # 'concurrencyLimit' enforces an upper bound requests hard limit. If concurrency reaches its value, surplus requests are buffered until there is enough capacity to execute them. Defaults to no limit (0).
  # concurrencyLimit: 0
  # 'concurrencyTargetPercentage' sets a percentage of the concurrencyLimit value that is targeted by autoscaler. This enables scaling up before the hard limit is reached.
  # concurrencyTargetPercentage: 80
  # minScale: minimum number of replicas that each revision should hav eat any one point in time.
  minScale: 1
  # maxScale: controls the maximum number of replicas that each revision should have. '0' means unlimited.
  maxScale: 3
  # initialScale: initial number of replicas a revision must achieve after it is created before it is marked as Ready.
  # initialScale: 1
  #  activationScale (not in use): minimum number of replicas a revision will create when it scales up from zero.
  # activationScale: 1
  # scaleDownDelay: time window before a scale-down decision is applied. "0s" <= value <= "1h"
  scaleDownDelay: "0s"
  # stable-window: sliding time window over which metrics are averaged to provide the input for scaling decisions. "6s" <= value <= 1h
  stableWindow: "30s"

# Inactive revisions are automatically cleaned up by Knative's garbage collection unless:
# 1) The Revision is active and is being reference by a Route; or
# 2) The Revision was created within the global retain-since-create-time setting; or
# 3) The Revision was last referenced by a Route within the global retain-since-last-active-time setting; or
# 4) There are fewer existing Revisions than the number specified by the global min-non-active-revisions setting.
# To disable garbage collection for this app's revisions, set disableGc true.
# disableGc: "false"

# Enable metrics scraping with Prometheus Operator
serviceMonitor:
  enabled: false
  scheme: http
  path: /metrics
  port: 8080
  additionalLabels:
    monitoring.barravar.dev.br/prometheus: brv-prometheus
  annotations: {}
  interval: 
  scrapeTimeout: 
  tlsConfig: {}
  bareTokenFile: 
  relabelings: []
  metricRelabelings: []

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

tolerations: []
# - key: "key1"
#   operator: "Equal"
#   value: "value1"
#   effect: "NoSchedule"

affinity:
  podAntiAffinity:
    enabled: true
    # Options for 'type':
    #   "preferred": Kubernetes will spread pods as possible, and still meet the desired number of replicas.
    #   "required": Kubernetes will spread pods as possible, but will not meet the desired number of replicas if more than one pod per node.
    type: preferred
    preferredWeight: 100

  nodeAffinity: 
    enabled: false
    # Options for 'type':
    #   "preferred": the scheduler tries to find a node that meets the rule, but still schedules the pod if none is found.
    #   "required": the scheduler will only schedule the pod if the rule is met
    type: preferred
    # 'matchExpressions' is required if type is 'preferred'
    matchExpressions: []
    # - key: topology.kubernetes.io/zone
    #   operator: In
    #   values:
    #   - eu-west-1a
    #   weight: 100
    # 'nodeSelectorTerms' is required if type is 'required'
    nodeSelectorTerms: []
    # - key: topology.kubernetes.io/zone
    #   operator: In
    #   values:
    #   - eu-west-1a
